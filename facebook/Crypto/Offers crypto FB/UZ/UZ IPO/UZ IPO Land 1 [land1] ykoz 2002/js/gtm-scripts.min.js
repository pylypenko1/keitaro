'use strict';

function checkErrorForm(e) {
  dataLayerActtion({
    eAction: 'error',
    eLabel: 'form/'.concat(e)
  });
}

function successForm(e, t) {
  dataLayerActtion({
    eAction: t,
    eLabel: 'form/'.concat(e, ' ')
  });
}

function unSuccessForm(e, t) {
  dataLayerActtion({
    eAction: t,
    eLabel: 'form/'.concat(e, ' ')
  });
}

function reportLoginCheckedGTM() {
  dataLayerActtion({
    eAction: 'userLoginChecked',
    eLabel: 'land/active_true'
  });
}

function initViewportTimer(e) {
  var t = null,
    o = 0,
    n = new Object();
  for (var a = 0; a < e.length; a++)
    (n[e[a].dataset.metric] = 0), addDataAttribute(e[a], 'viewTime/'.concat(e[a].dataset.metric));
  i(e);
  setInterval(function () {
    o++;
  }, 1e3);

  function r(e, a) {
    var r = window.pageYOffset + e.getBoundingClientRect().top,
      i = window.pageYOffset + e.getBoundingClientRect().bottom,
      c = window.pageYOffset + document.documentElement.clientHeight,
      l = document.documentElement.clientHeight / 2;
    if (c - r > l && c < i + l && t != e)
      return (
        n[a]++,
        t &&
          1 === n[t.dataset.metric] &&
          o > 0 &&
          dataLayerActtion({
            eAction: 'viewTime_'.concat(o),
            eLabel: ''.concat(t.dataset.metric),
          }),
        (o = 0),
        void (t = e)
      );
  }

  function i(e) {
    for (var t = 0; t < e.length; t++) r(e[t], e[t].dataset.metric);
  }
}

function addDataAttribute(e, t) {
  void 0 !== e.dataset.ga ? (e.dataset.ga += ' '.concat(t)) : (e.dataset.ga = t);
}
